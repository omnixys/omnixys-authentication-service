 # @license GPL-3.0-or-later
 # Copyright (C) 2025 Caleb Gyamfi - Omnixys Technologies
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 # See the GNU General Public License for more details.
 #
 # For more information, visit <https://www.gnu.org/licenses/>.
 
name: Security Check Node

on:
  schedule:
    - cron: '0 3 * * *' # t√§glich um 3:00 Uhr UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USER }}/${{ secrets.SERVICE }}-service

jobs:
  dependency-check:
    name: 'Security-Dependency-Check-${{ matrix.node-version }}-${{ vars.CURRENT_DATE }}'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24.10.0]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@75ba02d6183445fe0761d26e836bde58b1560600
        with:
          project: 'Omnixys-Authentication-Service'
          path: './'
          format: 'HTML'

      - name: Upload Dependency Check report
        uses: actions/upload-artifact@v4
        with:
          name: Depcheck-report
          path: ./reports

  snyk:
    name: 'Security-Snyk-Scan-${{ matrix.node-version }}-${{ vars.CURRENT_DATE }}'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24.10.0]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@cdb760004ba9ea4d525f2e043745dfe85bb9077e
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Code Test (SARIF)
        run: snyk code test --sarif > snyk-code.sarif
        continue-on-error: true

      - name: Run Snyk Dependency Test (JSON)
        run: snyk test --severity-threshold=high --json-file-output=snyk-report.json
        continue-on-error: true

      - name: Install snyk-to-html
        run: pnpm add snyk-to-html --workspace-root

      - name: Generate HTML Report
        run: |
          mkdir -p reports
          pnpm snyk-to-html -i snyk-report.json -o reports/snyk-report.html

      - name: Upload Snyk Report
        uses: actions/upload-artifact@v4
        with:
          name: Snyk-report
          path: ./reports

      - name: Run Snyk Monitor
        if: github.event_name == 'push'
        run: snyk monitor --all-projects

      - name: Run Snyk IaC Test
        run: snyk iac test --report
        continue-on-error: true

      - name: Run Snyk Container Monitor
        run: snyk container monitor ${{ env.IMAGE_NAME }}:latest

      - name: Upload SARIF Report to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

  docker-scout:
    name: 'Security-Docker-Scout-${{ vars.CURRENT_DATE }}'
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Scout Quickview
        id: docker-scout-quickview
        uses: docker/scout-action@v1.18.1
        with:
          command: quickview
          image: '${{ env.IMAGE_NAME }}:latest'

      - name: Docker Scout CVEs
        id: docker-scout-cves
        uses: docker/scout-action@v1.18.1
        with:
          command: cves
          image: '${{ env.IMAGE_NAME }}:latest'

      - name: Save Docker Scout Reports
        run: |
          echo "${{ steps.docker-scout-quickview.outputs.quickview }}" > docker-scout-quickview.md
          echo "${{ steps.docker-scout-cves.outputs.cves }}" > docker-scout-cves.md
        continue-on-error: true

      - name: Upload Docker Scout Reports
        uses: actions/upload-artifact@v4
        with:
          name: docker-scout-reports
          path: ./docker-scout-*.md

  audit:
    name: üîí PNPM Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: üì¶ Install dependencies (prod only)
        run: pnpm install --prod --frozen-lockfile

      - name: üß™ Run pnpm audit and save JSON
        run: |
          pnpm audit --json > audit-report.json || true

      - name: üì§ Upload audit JSON as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pnpm-audit-report
          path: audit-report.json

      - name: üßæ Append readable Audit Summary
        if: always()
        run: |
          echo "### üîí Dependency Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -s audit-report.json ]; then
            node -e "
            import fs from 'fs';
            const data = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
            if (!data.advisories) {
              console.log('‚úÖ No vulnerabilities found.');
              process.exit(0);
            }
            const advisories = Object.values(data.advisories);
            if (advisories.length === 0) {
              console.log('‚úÖ No vulnerabilities found.');
              process.exit(0);
            }

            const color = {
              critical: 'üî¥',
              high: 'üü†',
              moderate: 'üü°',
              low: 'üü¢',
            };

            console.log('| Severity | Package | Vulnerable | Patched | Path | Advisory | Recommended Update |');
            console.log('|-----------|----------|------------|----------|-----------|-----------|------------------|');

            for (const adv of advisories) {
              const sev = adv.severity;
              const pkg = adv.module_name;
              const vuln = adv.vulnerable_versions;
              const patched = adv.patched_versions || '-';
              const path = adv.findings?.[0]?.paths?.[0] || '-';
              const url = adv.url || 'n/a';
              const icon = color[sev] || '‚ö™';
              const updateCmd = patched && patched !== '-' 
                ? \`pnpm update \${pkg}@\${patched.replace('>=', '')}\`
                : \`pnpm update \${pkg}\`;

              console.log(\`| \${icon} \${sev} | \${pkg} | \${vuln} | \${patched} | \${path} | [link](\${url}) | \\\`\${updateCmd}\\\` |\`);
            }" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No audit data generated." >> $GITHUB_STEP_SUMMARY
          fi

      - name: üö® Fail workflow on critical issues
        id: failcheck
        if: always()
        run: |
          node <<'EOF'
          import fs from 'fs';
          const data = JSON.parse(fs.readFileSync('audit-report.json','utf8'));
          const critical = Object.values(data.advisories || {}).filter(a => a.severity === 'critical');
          if (critical.length > 0) {
            console.error(`‚ùå Critical vulnerabilities found: ${critical.length}`);
            process.exit(1);
          } else {
            console.log('‚úÖ No critical vulnerabilities.');
          }
          EOF

      - name: ü™™ Create GitHub Issue on critical vulnerabilities
        if: failure() # Nur wenn vorheriger Schritt fehlschl√§gt
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "üö® Critical vulnerabilities detected in PNPM audit"
          content-filepath: ./audit-report.json
          labels: |
            security
            vulnerability
          assignees: caleb-script
          token: ${{ secrets.GITHUB_TOKEN }}